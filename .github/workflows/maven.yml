
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
    


jobs:
  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file MavenWebappProject/pom.xml
    #upload the war file to the artifact
    - uses: actions/upload-artifact@v4
      with:
        name: MavenWebappProject
        path: /home/ubuntu/actions-runner/_work/maven-demo/maven-demo/MavenWebappProject/target/MavenWebappProject.war
#trivy scan of our code
    - name: Trivy FS Scan
      run:
        trivy fs --format table -o trivy-fs-report.html .

  #sonarqube code quality check:github action will install sonarqube scanner. 
  
  #you can get the code here(https://github.com/marketplace/actions/official-sonarqube-scan)

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v1 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

#install jq so our quality gate won't fail
    - name: install jq
      run:
        sudo apt-get update && sudo apt-get install -y jq

  
 # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  

  #set docker env
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
     
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

  #build docker image and push it
    - name: Build Docker Image
      run:
        docker build -t laura-eng-sys/maven-demo:latest .
        
  #trivy scan of our docker image
    - name: Trivy Image Scan
      run:
        trivy image --format table -o trivy-image-report.html laura-eng-sys/maven-demo:latest

#login into dockerhub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

        #push docker image
    - name: push docker image
      run:
        docker tag laura-eng-sys/maven-demo:latest lauradocker84/github-worflow:myfirst
        docker push lauradocker84/github-worflow:myfirst
